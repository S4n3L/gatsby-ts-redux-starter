/**
 * Implement Gatsby's Node APIs in this file.
 *
 * See: https://www.gatsbyjs.org/docs/node-apis/
 */

// You can delete this file if you're not using it

exports.onCreateWebpackConfig = ({
  stage,
  rules,
  loaders,
  plugins,
  actions,
}) => {
  const path = require("path")  // eslint-disable-line
  const autoprefixer = require("autoprefixer")  // eslint-disable-line
  const TsconfigPathsPlugin = require("tsconfig-paths-webpack-plugin")  // eslint-disable-line
  // const ExtractCssChunks = require("extract-css-chunks-webpack-plugin")

  actions.setWebpackConfig({
    resolve: {
      // This is what we use to manage module paths (instead of the node-modules package)
      plugins: [new TsconfigPathsPlugin()]
    },
    module: {
      rules: [
/*         {
          test: /\.css$/,
          exclude: /node_modules/,
          use: [
            // { loader: ExtractCssChunks.loader },
            {
              loader: "@teamsupercell/typings-for-css-modules-loader",
              options: {
                banner:
                  "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!"
              }
            },
            {
              loader: "css-loader",
              options: {
                importLoaders: 1,
                //onlyLocals: true,
                localsConvention: "camelCase",
                modules: {
                  localIdentName: "[name]__[local]___[hash:base64:8]",
                }
              }
            },
             {
              loader: "postcss-loader",
              options: {
                ident: "postcss",
                plugins: () => [
                  autoprefixer()
                ]
              }
            }
          ],
        }, */
        {
          test: /\.(scss|sass)$/,
          exclude: /node_modules/,
          use: [
/*             {
              loader: "@teamsupercell/typings-for-css-modules-loader",
              options: {
                banner:
                  "// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!"
              }
            }, */

            /* {
              loader: "css-loader",
              options: {
                importLoaders: 2,
                //onlyLocals: true,
                localsConvention: "camelCase",
                modules: {
                  localIdentName: "[name]__[local]___[hash:base64:8]",
                }
              }
            },
            {
              loader: "postcss-loader",
              options: {
                ident: "postcss",
                plugins: () => [
                  autoprefixer()
                ]
              }
            },*/
            loaders.css({
              importLoaders: 1,
              //onlyLocals: true,
              localsConvention: "camelCase",
              modules: {
                localIdentName: "[name]__[local]___[hash:base64:8]",
              }
            }),
            loaders.postcss(),
            {
              // loader: "sass-loader",
              loader: require.resolve("sass-loader"),
/*               options: {
                sassOptions: {
                  // This allow us to use @import statement in sccs files without the "../../.." syntax
                  includePaths: [path.resolve(__dirname, "../src/client/styles/css")]
                }
              }*/
            }
          ],
        },
      ],
    },
  })
}
